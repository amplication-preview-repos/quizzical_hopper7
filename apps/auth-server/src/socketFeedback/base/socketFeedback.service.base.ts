/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SocketFeedback as PrismaSocketFeedback } from "@prisma/client";

export class SocketFeedbackServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SocketFeedbackCountArgs, "select">
  ): Promise<number> {
    return this.prisma.socketFeedback.count(args);
  }

  async socketFeedbacks<T extends Prisma.SocketFeedbackFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SocketFeedbackFindManyArgs>
  ): Promise<PrismaSocketFeedback[]> {
    return this.prisma.socketFeedback.findMany<Prisma.SocketFeedbackFindManyArgs>(
      args
    );
  }
  async socketFeedback<T extends Prisma.SocketFeedbackFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SocketFeedbackFindUniqueArgs>
  ): Promise<PrismaSocketFeedback | null> {
    return this.prisma.socketFeedback.findUnique(args);
  }
  async createSocketFeedback<T extends Prisma.SocketFeedbackCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SocketFeedbackCreateArgs>
  ): Promise<PrismaSocketFeedback> {
    return this.prisma.socketFeedback.create<T>(args);
  }
  async updateSocketFeedback<T extends Prisma.SocketFeedbackUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SocketFeedbackUpdateArgs>
  ): Promise<PrismaSocketFeedback> {
    return this.prisma.socketFeedback.update<T>(args);
  }
  async deleteSocketFeedback<T extends Prisma.SocketFeedbackDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SocketFeedbackDeleteArgs>
  ): Promise<PrismaSocketFeedback> {
    return this.prisma.socketFeedback.delete(args);
  }
}
